

/* As graphic LCD used the DEM128064A model (128x64 pixels).

   Created by Serasidis Vassilis and finished at 03.Aug.2007
   Home: http://www.serasidis.gr 
   e-mail: info@serasidis.gr and avrsite@yahoo.gr

   This code is ditributed under GPL licence.
*/
#ifndef _glcd_h_
#define _glcd_h_
#include <avr/io.h>
#include <avr/pgmspace.h>
#define GLCD_WIDTH   128
#define GLCD_LEFT    0
#define GLCD_RIGHT   1
#ifndef lcdrs
#define lcdrs dk_bit(PORTD,5) //LCD's RS (DI) pin is connected to Pin0 of AVR
#define lcdrs_d dk_bit(DDRD,5)
#define lcdrw dk_bit(PORTD,6) //LCD's r/w pin is connected to Pin1 of AVR
#define lcdrw_d dk_bit(DDRD,6)
#define lcde dk_bit(PORTD,7) //LCD's e pin is connected to Pin2 of AVR
#define lcde_d dk_bit(DDRD,7)
#define	lcdcs1 dk_bit(PORTC,0) //LCD's CS1 pin is connected to Pin5 of AVR
#define	lcdcs1_d dk_bit(DDRC,0)
#define	lcdcs2 dk_bit(PORTC,1) //LCD's CS2 pin is connected to Pin5 of AVR
#define	lcdcs2_d dk_bit(DDRC,1)
#define	lcdrst dk_bit(PORTC,2) //LCD's RST pin is connected to Pin3 of AVR
#define	lcdrst_d dk_bit(DDRC,2)

#define lcd_da0 dk_bit(PORTB,0)
#define lcd_da0_i dk_bit(PINB,0)
#define lcd_da0_d dk_bit(DDRB,0)
#define lcd_da1 dk_bit(PORTB,1)
#define lcd_da1_i dk_bit(PINB,1)
#define lcd_da1_d dk_bit(DDRB,1)
#define lcd_da2 dk_bit(PORTB,2)
#define lcd_da2_i dk_bit(PINB,2)
#define lcd_da2_d dk_bit(DDRB,2)
#define lcd_da3 dk_bit(PORTB,3)
#define lcd_da3_i dk_bit(PINB,3)
#define lcd_da3_d dk_bit(DDRB,3)
#define lcd_da4 dk_bit(PORTB,4)
#define lcd_da4_i dk_bit(PINB,4)
#define lcd_da4_d dk_bit(DDRB,4)
#define lcd_da5 dk_bit(PORTB,5)
#define lcd_da5_i dk_bit(PINB,5)
#define lcd_da5_d dk_bit(DDRB,5)
#define lcd_da6 dk_bit(PORTC,4)
#define lcd_da6_i dk_bit(PINC,4)
#define lcd_da6_d dk_bit(DDRC,4)
#define lcd_da7 dk_bit(PORTC,3)
#define lcd_da7_i dk_bit(PINC,3)
#define lcd_da7_d dk_bit(DDRC,3)
#endif

// #define	data_port		PORTB
// #define	data_port_ddr	DDRB
// #define	data_port_pins	PINB



void glcdInit (void);
void Glcd_Set_Side(unsigned char Side);
void createWelcomeScreen (void);
void createRaster (void);
void delayTime (unsigned long counter);
void eStrobe (void);
void enable_cs1 (void);
void enable_cs2 (void);
void sendDataOnLCD (unsigned char data);
unsigned char readDataFromLCD (void);
void gLCDgotoXY (unsigned char lineData, unsigned char columnData);
void createWave (void);
void restoreRaster (void);
void fillDataLcdBuffer (unsigned char address, unsigned char data);
void GLCD_WriteChar(char charToWrite);
void GLCD_Puts (char *s);
void Glcd_Set_Page(unsigned char Page);
void Glcd_Set_X(unsigned char x);

void glcd_text57(u8 x, u8 y, char* textptr, u8 size, bool color);
void glcd_pixel(u8 x, u8 y, bool color);
void glcd_writeByte(bool side, char data);
char glcd_readByte(bool side);

unsigned char column = 0;
unsigned char line = 0;
unsigned int  lcdAddress = 0;
unsigned int  flashAddress = 0;
static unsigned char dataLcdBuffer[100];
static unsigned char dataLcdBackupBuffer[200];
unsigned int  backupLcdAddress = 0;

u8 lcd_khong_tot=0;

const char LcdRaster[] __attribute__ ((progmem)) = {
255,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1
,1,1,1,3,1,1,1,1,1,1,1,1,1,3,1,1
,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1
,1,171,1,1,1,1,1,1,1,1,1,3,1,1,1,1
,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,3
,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1
,1,1,1,1,255,0,0,240,248,140,140,248,240,0,0,252
,252,0,0,252,252,0,0,4,252,252,68,196,252,56,0,0
,255,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0
,0,0,0,8,0,0,0,0,0,0,0,0,0,8,0,0
,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0
,8,170,8,0,0,0,0,0,0,0,0,8,0,0,0,0
,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,8
,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0
,0,0,0,8,255,0,0,199,39,32,192,7,7,0,0,1
,3,6,6,3,1,0,0,4,7,7,0,0,7,7,0,0
,255,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0
,0,0,0,32,0,0,0,0,0,0,0,0,0,32,0,0
,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0
,32,170,32,0,0,0,0,0,0,0,0,32,0,0,0,0
,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,32
,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0
,0,0,0,32,255,0,0,25,34,34,28,0,30,33,33,33
,0,30,33,33,30,0,255,33,33,30,0,30,41,41,46,0
,255,128,0,128,0,128,0,128,0,192,0,128,0,128,0,128
,0,128,0,192,0,128,0,128,0,128,0,128,0,192,0,128
,0,128,0,128,0,128,0,192,0,128,0,128,0,128,0,128
,0,170,0,128,0,128,0,128,0,128,0,192,0,128,0,128
,0,128,0,128,0,192,0,128,0,128,0,128,0,128,0,192
,0,128,0,128,0,128,0,128,0,192,0,128,0,128,0,128
,0,128,0,128,255,0,40,32,40,32,40,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
,0,170,0,0,0,0,0,0,0,0,0,1,0,0,0,0
,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1
,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
,0,0,0,0,255,0,16,8,16,32,16,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0
,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0
,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0
,2,170,2,0,0,0,0,0,0,0,0,2,0,0,0,0
,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2
,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0
,0,0,0,2,255,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,255,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0
,0,0,0,8,0,0,0,0,0,0,0,0,0,8,0,0
,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0
,8,170,8,0,0,0,0,0,0,0,0,8,0,0,0,0
,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,8
,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0
,0,0,0,8,255,0,0,124,20,4,0,124,20,104,0,124
,84,68,0,56,68,68,120,0,0,0,0,0,0,0,0,0
,255,128,128,128,128,128,128,128,128,160,128,128,128,128,128,128
,128,128,128,160,128,128,128,128,128,128,128,128,128,160,128,128
,128,128,128,128,128,128,128,160,128,128,128,128,128,128,128,128
,128,170,128,128,128,128,128,128,128,128,128,160,128,128,128,128
,128,128,128,128,128,160,128,128,128,128,128,128,128,128,128,160
,128,128,128,128,128,128,128,128,128,160,128,128,128,128,128,128
,128,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,124,16,124,0,72,104,88,0,0
};


const char welcomeScreen[] __attribute__ ((progmem)) = {
255,1,1,1,1,1,1,1,129,129,65,33,33,17,17,17
, 17,17,17,17,17,33,33,65,65,129,129,1,1,1,1,1
, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
, 1,1,129,193,97,33,161,241,241,241,241,49,1,1,1,17
, 25,9,13,5,189,253,113,1,1,1,145,241,113,17,145,193
, 225,33,49,145,241,241,49,17,145,241,113,1,1,1,1,255
, 255,0,16,0,16,24,4,18,1,16,0,16,0,16,0,16
, 0,16,0,16,0,16,0,16,0,16,0,17,2,20,4,24
, 16,16,32,80,128,144,0,16,0,16,0,16,0,16,0,16
, 0,16,0,16,0,16,0,16,0,16,128,80,32,16,0,16
, 0,0,0,0,0,0,0,0,0,0,0,192,192,128,128,192
, 96,48,56,12,14,11,137,248,255,255,195,64,0,0,0,0
, 0,0,128,248,127,55,24,12,6,3,1,0,128,128,192,192
, 240,188,31,7,3,62,254,255,193,64,64,0,0,0,0,255
, 255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
, 0,128,128,0,0,0,1,130,4,4,8,8,8,16,16,16
, 144,16,16,16,16,8,8,4,2,1,128,0,0,0,0,0
, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
, 0,0,0,0,0,0,0,0,0,0,0,0,128,128,0,0
, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255
, 255,0,0,0,0,0,0,240,248,60,14,7,14,252,240,0
, 0,0,112,248,156,140,6,7,3,2,0,0,224,248,124,30
, 15,7,3,1,0,224,126,15,1,0,0,0,0,0,224,254
, 31,7,0,0,0,0,0,0,224,254,31,7,0,0,0,0
, 0,0,240,248,60,14,7,14,252,240,0,0,0,112,248,156
, 140,6,7,3,2,0,0,224,248,124,30,15,7,3,1,0
, 240,248,60,14,7,14,252,240,0,0,0,244,254,254,34,18
, 14,0,0,0,240,254,63,19,19,19,1,0,0,0,0,255
, 255,0,0,0,0,0,0,1,3,2,6,6,3,3,1,0
, 0,0,8,8,8,8,9,6,0,0,0,0,1,3,2,2
, 2,0,0,0,0,15,0,0,0,0,0,0,0,0,3,2
, 6,6,6,2,2,2,2,0,3,2,6,6,6,2,2,2
, 2,0,1,3,2,6,6,3,3,1,0,0,0,8,8,8
, 8,9,6,0,0,0,0,1,3,2,2,2,0,0,0,0
, 1,3,2,6,6,3,3,1,0,0,0,7,3,0,0,0
, 0,0,0,0,1,3,2,2,3,1,1,0,0,0,0,255
, 255,0,0,252,2,0,0,224,16,16,16,0,0,2,252,0
, 0,0,0,0,0,0,140,66,34,28,0,252,2,2,254,0
, 252,2,2,254,0,2,130,98,30,0,32,32,32,32,0,140
, 66,34,28,0,252,2,2,254,0,8,4,254,0,0,8,4
, 254,0,0,0,0,0,0,0,254,16,16,224,0,240,0,0
, 240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
, 0,224,224,0,0,0,0,64,32,0,0,96,0,16,48,224
, 64,0,0,0,0,128,224,32,16,16,224,192,0,0,0,255
, 255,0,0,225,2,0,224,1,2,2,2,0,0,2,1,0
, 0,0,0,0,0,0,3,2,2,66,0,3,2,34,225,0
, 3,2,2,65,0,0,3,0,0,0,0,0,0,0,0,3
, 194,34,34,192,3,2,2,1,0,2,2,3,2,0,2,2
, 3,2,0,0,0,0,0,0,3,2,2,65,0,9,10,10
, 7,224,0,0,0,64,0,0,0,0,0,0,0,0,0,0
, 0,3,63,60,8,6,1,0,0,48,56,36,32,34,33,1
, 0,48,48,0,14,63,33,0,32,28,15,3,0,0,0,255
, 255,128,128,131,140,176,143,128,152,165,165,190,128,146,165,169
, 146,128,146,165,169,146,128,128,160,191,160,128,128,160,191,160
, 128,128,160,191,160,128,146,165,169,146,128,128,128,128,128,128
, 153,162,162,156,128,158,169,169,174,128,129,190,129,131,128,152
, 165,165,190,128,146,165,169,146,128,128,160,191,160,128,158,161
, 161,191,128,128,160,191,160,128,146,165,169,146,128,128,128,128
, 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128
, 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,255
};


const char ac_quy_ic[] __attribute__ ((progmem)) = {0x7C,0x7E,0x7C,0x7C,0x7C,0x7C,0x7E,0x7C,0};
const char ga_loi_ic[] __attribute__ ((progmem)) = {0x7F,0x3E,0x1C,0x08,0x00,0x7F,0x3E,0x1C,0x08};
const char ga_nho_ic[] __attribute__ ((progmem)) = {0x00,0x00,0x7F,0x7F,0x3E,0x1C,0x08,0x00,0x00};
const char dung_ic[] __attribute__ ((progmem)) = {0x00,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x00};
const char xa_da_ic[] __attribute__ ((progmem)) = {0x00,0x00,0x10,0x38,0x7F,0x38,0x10,0x00,0x00};
const char de_ic[] __attribute__ ((progmem)) = {0x00,0x00,0x7F,0x3E,0x1C,0x08,0x3E,0x00,0x00};
const char bt_bat[] __attribute__ ((progmem)) = {0x00,0x7F,0x3E,0x1C,0x08,0x1C,0x3E,0x7F,0x00}; // bieu tuong bat may
const char bt_cho_tat[] __attribute__ ((progmem)) = {0x7F,0x3E,0x1C,0x08,0x00,0x7F,0x00,0x7F,0x00};
const char bt_cho_bat[] __attribute__ ((progmem)) = {0x7F,0x00,0x7F,0x08,0x00,0x7F,0x3E,0x1C,0x08};
	
u8 lx,ly;		
//#include "propfont.h"
//#include "xglcd_lib.c"

const char FONT[]  __attribute__ ((progmem)) ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE
	0x00, 0x00, 0x5F, 0x00, 0x00, // !
	0x00, 0x03, 0x00, 0x03, 0x00, // "
	0x14, 0x3E, 0x14, 0x3E, 0x14, // #
	0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
	0x43, 0x33, 0x08, 0x66, 0x61, // %
	0x36, 0x49, 0x55, 0x22, 0x50, // &
	0x00, 0x05, 0x03, 0x00, 0x00, // '
	0x00, 0x1C, 0x22, 0x41, 0x00, // (
	0x00, 0x41, 0x22, 0x1C, 0x00, // )
	0x14, 0x08, 0x3E, 0x08, 0x14, // *
	0x08, 0x08, 0x3E, 0x08, 0x08, // +
	0x00, 0x50, 0x30, 0x00, 0x00, // ,
	0x08, 0x08, 0x08, 0x08, 0x08, // -
	0x00, 0x60, 0x60, 0x00, 0x00, // .
	0x20, 0x10, 0x08, 0x04, 0x02, // /
	0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
	0x00, 0x04, 0x02, 0x7F, 0x00, // 1
	0x42, 0x61, 0x51, 0x49, 0x46, // 2
	0x22, 0x41, 0x49, 0x49, 0x36, // 3
	0x18, 0x14, 0x12, 0x7F, 0x10, // 4
	0x27, 0x45, 0x45, 0x45, 0x39, // 5
	0x3E, 0x49, 0x49, 0x49, 0x32, // 6
	0x01, 0x01, 0x71, 0x09, 0x07, // 7
	0x36, 0x49, 0x49, 0x49, 0x36, // 8
	0x26, 0x49, 0x49, 0x49, 0x3E, // 9
	0x00, 0x36, 0x36, 0x00, 0x00, // :
	0x00, 0x56, 0x36, 0x00, 0x00, // ;
	0x08, 0x14, 0x22, 0x41, 0x00, // <
	0x14, 0x14, 0x14, 0x14, 0x14, // =
	0x00, 0x41, 0x22, 0x14, 0x08, // >
	0x02, 0x01, 0x51, 0x09, 0x06, // ?
	0x3E, 0x41, 0x59, 0x55, 0x5E, // @
	0x7E, 0x09, 0x09, 0x09, 0x7E, // A
	0x7F, 0x49, 0x49, 0x49, 0x36, // B
	0x3E, 0x41, 0x41, 0x41, 0x22, // C
	0x7F, 0x41, 0x41, 0x41, 0x3E, // D
	0x7F, 0x49, 0x49, 0x49, 0x41, // E
	0x7F, 0x09, 0x09, 0x09, 0x01, // F
	0x3E, 0x41, 0x41, 0x49, 0x3A, // G
	0x7F, 0x08, 0x08, 0x08, 0x7F, // H
	0x00, 0x41, 0x7F, 0x41, 0x00, // I
	0x30, 0x40, 0x40, 0x40, 0x3F, // J
	0x7F, 0x08, 0x14, 0x22, 0x41, // K
	0x7F, 0x40, 0x40, 0x40, 0x40, // L
	0x7F, 0x02, 0x0C, 0x02, 0x7F, // M
	0x7F, 0x02, 0x04, 0x08, 0x7F, // N
	0x3E, 0x41, 0x41, 0x41, 0x3E, // O
	0x7F, 0x09, 0x09, 0x09, 0x06, // P
	0x1E, 0x21, 0x21, 0x21, 0x5E, // Q
0x7F, 0x09, 0x09, 0x09, 0x76};// R

const u8 FONT2[]  __attribute__ ((progmem)) ={0x26, 0x49, 0x49, 0x49, 0x32, // S
	0x01, 0x01, 0x7F, 0x01, 0x01, // T
	0x3F, 0x40, 0x40, 0x40, 0x3F, // U
	0x1F, 0x20, 0x40, 0x20, 0x1F, // V
	0x7F, 0x20, 0x10, 0x20, 0x7F, // W
	0x41, 0x22, 0x1C, 0x22, 0x41, // X
	0x07, 0x08, 0x70, 0x08, 0x07, // Y
	0x61, 0x51, 0x49, 0x45, 0x43, // Z
	0x00, 0x7F, 0x41, 0x00, 0x00, // [
	0x02, 0x04, 0x08, 0x10, 0x20, // 
	0x00, 0x00, 0x41, 0x7F, 0x00, // ]
	0x04, 0x02, 0x01, 0x02, 0x04, // ^
	0x40, 0x40, 0x40, 0x40, 0x40, // _
	0x00, 0x01, 0x02, 0x04, 0x00, // `
	0x20, 0x54, 0x54, 0x54, 0x78, // a
	0x7F, 0x44, 0x44, 0x44, 0x38, // b
	0x38, 0x44, 0x44, 0x44, 0x44, // c
	0x38, 0x44, 0x44, 0x44, 0x7F, // d
	0x38, 0x54, 0x54, 0x54, 0x18, // e
	0x04, 0x04, 0x7E, 0x05, 0x05, // f
	0x08, 0x54, 0x54, 0x54, 0x3C, // g
	0x7F, 0x08, 0x04, 0x04, 0x78, // h
	0x00, 0x44, 0x7D, 0x40, 0x00, // i
	0x20, 0x40, 0x44, 0x3D, 0x00, // j
	0x7F, 0x10, 0x28, 0x44, 0x00, // k
	0x00, 0x41, 0x7F, 0x40, 0x00, // l
	0x7C, 0x04, 0x78, 0x04, 0x78, // m
	0x7C, 0x08, 0x04, 0x04, 0x78, // n
	0x38, 0x44, 0x44, 0x44, 0x38, // o
	0x7C, 0x14, 0x14, 0x14, 0x08, // p
	0x08, 0x14, 0x14, 0x14, 0x7C, // q
	0x00, 0x7C, 0x08, 0x04, 0x04, // r
	0x48, 0x54, 0x54, 0x54, 0x20, // s
	0x04, 0x04, 0x3F, 0x44, 0x44, // t
	0x3C, 0x40, 0x40, 0x20, 0x7C, // u
	0x1C, 0x20, 0x40, 0x20, 0x1C, // v
	0x3C, 0x40, 0x30, 0x40, 0x3C, // w
	0x44, 0x28, 0x10, 0x28, 0x44, // x
	0x0C, 0x50, 0x50, 0x50, 0x3C, // y
	0x44, 0x64, 0x54, 0x4C, 0x44, // z
	0x00, 0x08, 0x36, 0x41, 0x41, // {
		0x00, 0x00, 0x7F, 0x00, 0x00, // |
	0x41, 0x41, 0x36, 0x08, 0x00, // }
0x02, 0x01, 0x02, 0x04, 0x02};// ~
#endif